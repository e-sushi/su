digraph G {
    bgcolor="black"
    overlap=false
    edge[color="white"]
    node[shape=rect color="white" fontcolor="white"]
    file->decl
    file->directive
    ":"[label="\":\""]
    "("[label="\"(\""]
    ")"[label="\")\""]
    "{"[label="\"{\""]
    "}"[label="\"}\""]
    "*"[label="\"*\""]
    "["[label="\"[\""]
    "]"[label="\"]\""]
    "="[label="\"=\""]
    type
    as[label="\"as\""]
    string
    id
    using[label="\"using\""]
    
    subgraph{
        node[color="magenta"]
        edge[color="magenta"]
        directive->"#"
        "#"->import
        "#"->run
        "#"->internal
        
        import->decl_id->"{"
        import->string->"{"->import
        "{"->"}"
        "}"->as->id
    }
    
    
    //var declaration
    var_decl[color="red"]
    decl->var_decl
    subgraph{
        node[color="red"]
        edge[color="red"]
        
        var_id->id
        
        var_decl->var_id->":"
        ":"->var_decl_type->"*"
        "*"->"*"
        "*"->"["->int->"]"->"*"
        "]"->"["
        "]"->"="
        "*"->"="
        var_decl_type->"="
        
        "="->exp
        
        var_decl_colon->"="
    }
    
    
    //func declaration
    func_decl[color="blue"]
    decl->func_decl
    subgraph{
        node[color="blue"]
        edge[color="blue"]
        
        func_id->id
        
        func_decl->func_id
        func_id->"("->decl->var_decl
        decl->","->decl[style="dashed"]
        "("->")"
        decl->func_decl_cparen
        func_decl_cparen->":"->type->scope
    }
    
    //struct declaration
    struct_decl[color="green"]
    decl->struct_decl  
    subgraph{
        node[color="green"]
        edge[color="green"]
        
        struct_id->id
        struct_decl->struct_id->struct_decl_colon->"\"struct\""->scope->id->";"
    }
    
    //scope
    scope[color="aquamarine"]
    subgraph{
        node[color="aquamarine"]
        edge[color="aquamarine"]

        scope->"{"
        scope->"}"
        "{"->decl
        "{"->statement
    }
    
    statement[color="lightsteelblue"]
    subgraph{
        node[color="lightsteelblue"]
        edge[color="lightsteelblue"]
        "("[label="\"(\""]
        statement->scope
        statement->directive
        statement->struct_decl
        statement->exp->";"
        statement->using->var_id->scope
        statement->"\"for\""->"("
        "("->exp
        "("->decl
        "("->";"
        exp->";"
        decl->";"
        ";"->exp->";"->exp->")"->statement
        statement->"\"return\""
        statement->"\"defer\""->statement
        statement->"\"break\""
        statement->"\"continue\""
    }

    exp[color="purple"]
    subgraph{
        node[color="purple"]
        edge[color="purple"]
        exp->{assignment, conditional, struct_id}
        assignment->var_id->"="->{exp, initializer}
        initializer->"{"
        assignment->","->assignment[style="dashed"]
        assignment->"}"
        "if"[label="\"if\""]
        "else"[label="\"else\""]
        conditional->{logical_or, "if"}
        "if"->"("->exp->")"->exp->"else"->exp

        logical_or->logical_and
        logical_and->"\"||\""->logical_and[style="dashed"]

        logical_and->bit_or
        bit_or->"\"&&\""->bit_or[style="dashed"]

        bit_or->bit_xor
        bit_xor->"\"|\""->bit_xor[style="dashed"]

        bit_xor->bit_and
        bit_and->"\"^\""->bit_and[style="dashed"]

        bit_and->equality
        equality->"\"&\""->equality[style="dashed"]

        equality->relational
        relational->{"\"!=\"", "\"==\""}->relational[style="dashed"]

        relational->bit_shift
        bit_shift->{"\"<\"", "\">\"", "\"<=\"", "\">=\""}->bit_shift[style="dashed"]

        bit_shift->additive
        additive->{"\"<<\"","\">>\""}->additive[style="dashed"]

        additive->term
        term->{"\"+\"", "\"-\""}->term[style="dashed"]

        term->factor
        factor->{"\"*\"", "\"/\"", "\"%\""}->factor[style="dashed"]

        factor->"("->exp->")"
        factor->unary->factor
        factor->literal
        factor->var_id
        factor->incdec->var_id
        factor->var_id->incdec
        factor->call
        factor->access

        call->func_id->"("->arg->{"\",\""->arg, ")"}
        arg->{exp,id->"="->exp}
        access->id->"\".\""->id
        

    }

    type->{scalar_type,struct_type}
    scalar_type->{
        "\"void\"", 
        "\"u8\"",
        "\"u16\"",
        "\"u32\"",
        "\"u64\"",
        "\"s8\"",
        "\"s16\"",
        "\"s32\"",
        "\"s64\"",
        "\"f32\"",
        "\"f64\""
    }

    struct_type->{
        "\"str\"",
        "\"any\"",
        struct_id
    }

    literal->{int,float,string}
    int->"any integer number sequence, which may be \nrepresented in decimal, binary, or hex"
    float->"any floating point number sequence"

    
    id->"any alphanumeric sequence, not starting with a number, \nand including all unicode characters outside of ascii's range"
    
    
    
}