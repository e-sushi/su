/* 1696345219 [2023/10/03 08:00:19]
    generated by diagnostics.raku from diagnostics.def
*/
namespace amu {
struct MessageSender;
namespace diagnostic {
namespace path {
FORCE_INLINE void not_found(MessageSender sender, String arg0);
} // namespace path

namespace compiler {
FORCE_INLINE void expected_a_path_for_arg(MessageSender sender, String arg0);
FORCE_INLINE void unknown_option(MessageSender sender, String arg0);
FORCE_INLINE void no_path_given(MessageSender sender);
FORCE_INLINE void expected_path_or_paths_for_arg_option(MessageSender sender, String arg0);
} // namespace compiler

namespace lexer {
FORCE_INLINE void unexpected_eof_single_quotes(MessageSender sender);
FORCE_INLINE void unexpected_eof_double_quotes(MessageSender sender);
FORCE_INLINE void multiline_comment_missing_end(MessageSender sender);
FORCE_INLINE void unknown_directive(MessageSender sender, String arg0);
FORCE_INLINE void unknown_svar(MessageSender sender, String arg0);
FORCE_INLINE void invalid_token(MessageSender sender);
} // namespace lexer

namespace parser {
FORCE_INLINE void expected_type(MessageSender sender);
FORCE_INLINE void expected_label_or_import(MessageSender sender);
FORCE_INLINE void expected_identifier(MessageSender sender);
FORCE_INLINE void expected_import_directive(MessageSender sender);
FORCE_INLINE void expected_colon_for_label(MessageSender sender);
FORCE_INLINE void unknown_identifier(MessageSender sender, Token* arg0);
FORCE_INLINE void label_already_defined(MessageSender sender, Token* arg0);
FORCE_INLINE void missing_close_brace(MessageSender sender);
FORCE_INLINE void expected_comma_or_closing_paren_tuple(MessageSender sender);
FORCE_INLINE void unexpected_token(MessageSender sender, Token* arg0);
FORCE_INLINE void expected_open_paren(MessageSender sender);
FORCE_INLINE void expected_close_paren(MessageSender sender);
FORCE_INLINE void expected_open_brace(MessageSender sender);
FORCE_INLINE void expected_close_brace(MessageSender sender);
FORCE_INLINE void label_group_missing_id(MessageSender sender);
FORCE_INLINE void label_missing_colon(MessageSender sender);
FORCE_INLINE void switch_missing_open_paren(MessageSender sender);
FORCE_INLINE void switch_missing_close_paren(MessageSender sender);
FORCE_INLINE void switch_missing_open_brace(MessageSender sender);
FORCE_INLINE void switch_empty_body(MessageSender sender);
FORCE_INLINE void switch_missing_match_arrow_after_expr(MessageSender sender);
FORCE_INLINE void switch_missing_comma_after_match_arm(MessageSender sender);
FORCE_INLINE void for_missing_open_paren(MessageSender sender);
FORCE_INLINE void for_missing_close_paren(MessageSender sender);
FORCE_INLINE void for_expected_some_identfier(MessageSender sender);
FORCE_INLINE void for_label_group_not_allowed(MessageSender sender);
FORCE_INLINE void for_expected_in(MessageSender sender);
FORCE_INLINE void for_cannot_declare_variables(MessageSender sender);
FORCE_INLINE void tuple_expected_comma_or_close_paren(MessageSender sender);
FORCE_INLINE void array_expected_comma_or_close_square(MessageSender sender);
FORCE_INLINE void tuple_positional_arg_but_found_label(MessageSender sender);
FORCE_INLINE void if_missing_open_paren(MessageSender sender);
FORCE_INLINE void if_missing_close_paren(MessageSender sender);
FORCE_INLINE void missing_semicolon(MessageSender sender);
FORCE_INLINE void missing_function_return_type(MessageSender sender);
FORCE_INLINE void missing_open_brace_for_struct(MessageSender sender);
FORCE_INLINE void struct_only_labels_allowed(MessageSender sender);
FORCE_INLINE void struct_member_functions_not_allowed(MessageSender sender);
FORCE_INLINE void extraneous_close_brace(MessageSender sender);
FORCE_INLINE void unexpected_token_in_module(MessageSender sender);
FORCE_INLINE void array_missing_close_square(MessageSender sender);
FORCE_INLINE void runtime_structures_not_allowed(MessageSender sender);
FORCE_INLINE void struct_duplicate_member_name(MessageSender sender, Token* arg0);
FORCE_INLINE void static_array_count_must_eval_to_integer(MessageSender sender, Type* arg0);
FORCE_INLINE void static_array_size_cannot_be_negative(MessageSender sender);
FORCE_INLINE void subscript_missing_close_square(MessageSender sender);
FORCE_INLINE void runtime_variable_cannot_be_used_as_static_array_count(MessageSender sender);
FORCE_INLINE void intrinsic_print_missing_parenthesis(MessageSender sender);
FORCE_INLINE void intrinsic_print_empty(MessageSender sender);
FORCE_INLINE void tuple_type_plain_expression(MessageSender sender);
FORCE_INLINE void tuple_type_expression_must_be_explicitly_typed(MessageSender sender);
} // namespace parser

namespace sema {
FORCE_INLINE void func_ret_expected_typeref(MessageSender sender);
FORCE_INLINE void cannot_implict_coerce(MessageSender sender, Type* from_type, Type* to_type);
FORCE_INLINE void cant_find_binop_trait(MessageSender sender, String trait_name, Type* arg1, Type* arg2);
FORCE_INLINE void mismatch_argument_type(MessageSender sender, Type* arg_type, Type* param_type, String arg_str, String func_name);
FORCE_INLINE void too_many_arguments(MessageSender sender, String arg0);
FORCE_INLINE void not_enough_arguments(MessageSender sender, String arg0);
FORCE_INLINE void invalid_type_lhs_access(MessageSender sender);
FORCE_INLINE void cannot_access_members_scalar_type(MessageSender sender);
FORCE_INLINE void array_types_dont_have_member(MessageSender sender, String arg0);
FORCE_INLINE void cannot_access_members_of_function_type(MessageSender sender);
FORCE_INLINE void too_many_levels_of_indirection_for_access(MessageSender sender);
FORCE_INLINE void unknown_member(MessageSender sender, Type* type, String member_name);
FORCE_INLINE void cannot_have_a_variable_of_void_type(MessageSender sender);
FORCE_INLINE void if_mismatched_types_cannot_coerce(MessageSender sender, Type* first_type, Type* later_type);
FORCE_INLINE void return_value_of_func_block_cannot_be_coerced_to_func_return_type(MessageSender sender, Type* func_type, Type* block_type);
FORCE_INLINE void break_outside_of_loop(MessageSender sender);
FORCE_INLINE void cant_use_whatever_as_value(MessageSender sender);
FORCE_INLINE void cant_use_whatever_as_variable_type(MessageSender sender);
FORCE_INLINE void control_expressions_can_only_be_used_at_the_end_of_logical_operators(MessageSender sender);
FORCE_INLINE void compile_time_code_cannot_reference_runtime_memory(MessageSender sender);
FORCE_INLINE void array_literal_type_mismatch(MessageSender sender, s64 elem_index, Type* bad_type, Type* first_type);
FORCE_INLINE void static_array_count_expr_not_compile_time(MessageSender sender);
FORCE_INLINE void static_array_expr_must_resolve_to_integer(MessageSender sender, Type* arg0);
FORCE_INLINE void static_array_size_cannot_be_negative(MessageSender sender, s64 arg0);
FORCE_INLINE void type_is_not_subscriptable(MessageSender sender, Type* arg0);
FORCE_INLINE void subscript_must_evaluate_to_integer(MessageSender sender, Type* arg0);
FORCE_INLINE void subscript_out_of_bounds(MessageSender sender, s64 bad_guy, s64 array_size);
FORCE_INLINE void subscript_negative_not_allowed_on_pointer(MessageSender sender);
FORCE_INLINE void comparison_between_pointer_and_scalar(MessageSender sender);
FORCE_INLINE void float_in_pointer_arithmetic(MessageSender sender);
FORCE_INLINE void pointer_equality_non_zero_integer(MessageSender sender);
FORCE_INLINE void pointer_integer_not_additive(MessageSender sender);
FORCE_INLINE void pointer_arithmetic_not_additive(MessageSender sender);
FORCE_INLINE void pointer_on_rhs_of_arithmetic(MessageSender sender);
FORCE_INLINE void static_array_invalid_member(MessageSender sender, String arg0);
FORCE_INLINE void modulo_not_defined_on_floats(MessageSender sender);
FORCE_INLINE void cant_take_reference_of_value(MessageSender sender);
FORCE_INLINE void dereference_operator_only_works_on_pointers(MessageSender sender);
FORCE_INLINE void range_mismatched_types(MessageSender sender);
FORCE_INLINE void range_non_scalar_not_supported(MessageSender sender);
FORCE_INLINE void casting_between_non_scalar_types_not_supported(MessageSender sender);
FORCE_INLINE void intrinsic_print_named_arg(MessageSender sender);
FORCE_INLINE void unary_comptime_expr_not_comptime(MessageSender sender);
FORCE_INLINE void static_array_unusally_large(MessageSender sender, String arg0);
FORCE_INLINE void tuple_struct_initializer_unknown_member(MessageSender sender, String arg0, Type* arg1);
FORCE_INLINE void tuple_struct_initializer_cannot_cast_expr_to_member(MessageSender sender, Type* arg0, String arg1, Type* arg2);
FORCE_INLINE void tuple_struct_initializer_named_member_already_satisfied(MessageSender sender, String arg0);
FORCE_INLINE void tuple_struct_initializer_too_many_elements(MessageSender sender);
FORCE_INLINE void tuple_cast_to_structured_not_yet_supported(MessageSender sender);
} // namespace sema

namespace internal {
FORCE_INLINE void valid_path_but_internal_err(MessageSender sender, String arg0, String arg1);
} // namespace internal

} // namespace diagnostic
} // namespace amu
