/*

	Localized messages intended to inform the user about whats
	being compiled and such.

	TODOS
	-----
	Dynamic generation

	Add reference counting so that diags can be easily discarded.

*/

#ifndef AMU_DIAGNOSTICS_H
#define AMU_DIAGNOSTICS_H

// TODO(sushi) remove the dynamic array of args when this is generated by the script
//             probably just use 

#include "Messenger.h"

namespace amu {

struct Token;
struct Type;

namespace diagnostic {
// #include "data/diagnostics-data.generated"
// extern language lang;
}


enum class Lang {
	English,
	Esperanto,
	Japanese,
	COUNT,
};

extern Lang language;

struct Diag {
	enum class Kind {
		InvalidToken,
		UnknownSid,
		UnknownDirective,
		ExpectedAPathForArg,
		ExpectedPathOrPathsForArgOption,
		UnknownOption,
		NoPathGiven,
		PathNotFound,
	};

	Kind kind;
	Message::Kind severity;

	MessageSender sender;

	union Arg {
		String string;
		Token* token;
		Type* type;
		s64 num;
	};

	Array<Arg> args;

	Message (*emit_callback)(Diag*);

	void
	emit() {
		messenger.dispatch(emit_callback(this));
	}

	static Diag 
	create(MessageSender sender, Kind kind, Message::Kind severity, s32 n_args);

	void
	destroy();

	static Diag no_path_given(MessageSender m);
	static void no_path_given(Array<Diag>& to, MessageSender m);

	static Diag path_not_found(MessageSender m, String path);
	static void path_not_found(Array<Diag>& to, MessageSender m, String path);

	static Diag	expected_a_path_for_arg(MessageSender m, String arg);
	static void expected_a_path_for_arg(Array<Diag>& to, MessageSender m, String arg);

	static Diag	expected_path_or_paths_for_arg_option(MessageSender m, String arg);
	static void expected_path_or_paths_for_arg_option(Array<Diag>& to, MessageSender sender, String arg);

	static Diag	unknown_option(MessageSender m, String arg); 
	static void unknown_option(Array<Diag>& to, MessageSender m, String arg);

	static Diag	invalid_token(MessageSender m, Token* tok);
	static void invalid_token(Array<Diag>& to, MessageSender m, Token* tok);

	static Diag unknown_sid(MessageSender m, String s);
	static void unknown_sid(Array<Diag>& to, MessageSender m, String s);

	static Diag	unknown_directive(MessageSender m, String s);
	static void unknown_directive(Array<Diag>& to, MessageSender m, String s);
};

} // namespace amu
  
#endif // AMU_DIAGNOSTICS_H
