            file = { label | multi-label | directive ";" }

           scope = "{" { ( statement | decl ) } "}"

           label = id ":" 
                 ( decl
                 | import
                 )
       var-label = id ":" var-decl
     multi-label = id { "," id } ":" var-decl

     struct-decl = "struct" "(" arg { "," arg } ")" "{" { label } "}"
     module-decl = "module" "(" arg { "," arg } ")" "{" decl "}"
        var-decl = type { [ "*" ] | "[" [ int | ".." ] "]" } [ "=" exp ] ";"
       func-decl = label function

            decl = struct-decl
                 | module-decl
                 | func-decl
                 | var-decl

       statement = scope 
                 | decl
                 | label
                 | multi-label
                 | directive ";"
                 | exp ";"
                 | [ label ] "using" module-label ";" 
                 | label "using struct-label ";"
                 | [ normal-label ] "using" var-label ";" 
                 | functional-label "using" func-label ";" // alias a function call, keeping all parameters the same
                 | functional-label "using" func-label "(" decl, { "," decl } ")" ";" // alias a function call so that it uses different parameters
                 | "if" "(" exp ")" statement [ "else" statement ]
                 | [ normal-label ] "for" "(" [ exp | var-decl ] ";" [ exp ] ";" [ exp ] ")" statement
                 | [ normal-label ] "while" "(" exp ")" statement
                 | "defer" statement
                 | "break" [ loop-label ] ";"
                 | "continue" [ loop-label ] ";"
                 | "return" exp ";"
                 | "switch" "(" exp ")" "{" { "case" ( literal | exp ) ";" statement } "}"

             exp = directive | assignment | conditional
      assignment = var-label "=" exp
     conditional = logical-or | "if" "(" exp ")" exp "else" exp
      logical-or = logical-and { "||" logical-and }
          bit-or = bit-xor { "|" bit-xor }
         bit-and = equality { "&" equality }
        equality = relational { ("!=" | "==" ) relational }
      relational = bit-shift { ( "<" | ">" | "<=" | ">=" ) bit-shift }
        additive = term { ( "+" | "-" ) term }
            term = access { ( "*" | "/" | "%" ) } access
          access = factor { "." access } 
          factor = unary factor
                 | factor "$"
                 | literal
                 | access
                 | call
                 | "(" exp ")"
                 | [ struct-label ] initializer
                 | var-label
                 | cast
                 | reinterpret
           unary = "!" | "-" | "~"
            call = func-label "(" [ arg { "," arg } ] ")"
                 | var-label "." func-label "(" [ arg { "," arg } ] ")"
     initializer = "{" [ exp { "," exp } [ "," ] }
            cast = "<" type ">" exp
     reinterpret = "<" "!" type ">" exp
        function = "(" arg { "," arg } ")" "->" type { "," type } scope
             arg = exp | id "=" exp | "?" id
       parameter = var-label | "?" id 

            type = scalar-type | struct-id | ( module-id | struct-id ) { "." subtype }
         subtype = struct-id | ( module-id | struct-id ) { "." subtype }
     scalar-type = "void" | "u8" | "u16" | "u32" | "u64" | "s8" | "s16" | "s32" | "s64" | "f32" | "f64"

          import = "#" "import" ( id | string ) // TODO(sushi)

      decl-label = ( module-label | struct-label | func-label | var-label )
    module-label = ? a label referencing a module ? 
    struct-label = ? a label referencing a struct ? 
      func-label = ? a label referencing a function ?
       var-label = ? a label referencing a variable ? 
      loop-label = ? a label referencing a loop ?

              id = ? any alphanumeric number sequence, not starting with a number, and including all unicode characters outside od ascii's range ?
         literal = int | float | string | char
             int = ? any integer number sequence, which may be represented in decimal, binary, or hex ?
           float = ? any floating point number sequence ? 
          string = """ { char } """
            char = ? any unicode codepoint ? 
                 
module = { label | import }


label = id { "," id } ":" expr
idgroup = id { "," id }
stmt = ( label | defer | expr ) ";"
defer = "defer" expr
expr = assignment | ctime | loop
assignment = [ id | type ] "=" exp
ctime = [ type ] ":" exp
loop = switch | "loop" expr | 
for = "for" ( "(" label ";" expr ";" expr ")" | "(" id { "," id } "in" expr ")" ) expr
switch = conditional | "switch" "(" expr ")" "{" { expr "=>" expr } "}"
conditional = logical-or | "if" "(" expr ")" expr [ "else" expr ]
logical-or = logical-and { "||" logical-and }
logical-and = bit-or { "&&" bit-or }
bit-or = bit-xor { "|" bit-xor }
bit-xor = bit-and { "^" bit-and }
bit-and = equality { "&" equality }
equality = relational { ("!=" | "==" ) relational }
relational = bit-shift { ( "<" | ">" | "<=" | ">=" ) bit-shift }
bit-shift = additive { "<<" | ">>" additive }
additive = term { ( "+" | "-" ) term }                           
term = access { ( "*" | "/" | "%" ) access }
access = factor { "." factor }                                   
factor = unary factor                                            
       | factor "$"                                               
       | literal                                                  
       | access                                                   
       | call                                                     
       | tuple [ ( "->" id { "," id } [ "," ] | block ) ] // arithmetic parenthesis, function type, or closure
       | type [ block ] // type, or type literal                      
       | var-label                                                
       | cast                  
       | block                                   
       | reinterpret        
       | conditional 
conditional = "if" "(" expr ")" expr [ "else" expr ]
block = "{" { stmt } "}"                                     
unary = "!" | "-" | "~"       
call = func-label "(" [ arg { "," arg } ] ")"
     | var-label "." func-label "(" [ arg { "," arg } ] ")"
initializer = "{" [ exp { "," exp } [ "," ] }
cast = "(" type ")" exp
reinterpret = "(" "!" type ")" exp
parameter = var-label | "?" id                                    

tuple = "(" ( label | expr ) { "," ( label | expr ) } [ "," ] ")"

type-literal = type block
type = scalar-type | struct-id | func-type | array-type | subtype
subtype = (module-id | struct-id) { "." subtype } 

scalar-type = "void" | "u8" | "u16" | "u32" | "u64" | "s8" | "s16" | "s32" | "s64" | "f32" | "f64"

func-type = "(" [ arg { "," arg } [ "," ] ] ")" "->" type { "," type } 
func-arg = label ( ( type | "?" id ) [ rtime-exp ] | rtime-exp )

import = "#" "import" ( string | subtype )

stmt = exp ";"

literal = int | float | string | char
int = ? any integer number sequence, which may be represented in decimal, binary, or hex ?
float = ? any floating point number sequence ? 
string = """ { char } """
char = ? any unicode codepoint ? 




