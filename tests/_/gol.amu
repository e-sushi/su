// TODO(sushi) add printing the board once we figure out how to handle 
//             printing in the VM

width :: (s32)10;
height :: (s32)10;
area :: width * height;

A: u8[area];
B: u8[area];
active := &A;
next := &B;

coord :: (x: s32, y: s32) -> s32 {
    ((x % width) + width) % width * width + (((y % height) + height) % height)
}

live :: (x: s32, y: s32) -> void { 
    (*next)[coord(x,y)] = 1;
}

die :: (x: s32, y: s32) -> void { 
    (*next)[coord(x,y)] = 0;
}

count_neighbors :: (x: s32, y: s32) -> s32 {
    (*active)[coord(x-1, y  )] +
	(*active)[coord(x+1, y  )] +
	(*active)[coord(x,   y+1)] +
	(*active)[coord(x,   y-1)] +
	(*active)[coord(x-1, y+1)] +
	(*active)[coord(x+1, y+1)] +
	(*active)[coord(x-1, y-1)] +
	(*active)[coord(x+1, y-1)]
}

main :: () -> void {

	for(i: 0..A.count)
       (*active)[i] = #rand_int % 2;

    loop {
        for(x: 0..width) {
            for(y: 0..height) {
                N := count_neighbors(x,y); 
                if((*active)[coord(x,y)]) {
                    if(N < 2 || N >= 4) {
                        die(x,y);
                    } else {
                        live(x,y);
                    }
                } else if(N==3) {
                    live(x,y);
                } else {
                    die(x,y);
                }
				n = *next;
            }
        }
        save := active;
        active = next;
        next = save;
        arr = *active;
		
		// if the board is empty randomize it again
		alive := 0;
		for(i: 0..area) {
			if((*active)[i]) {
				alive = 1;
				break;
			}
		}

		if(alive == 0) {
			for(i: 0..area) {
				(*active)[i] = #rand_int % 2;
			}
		}
    }
}
