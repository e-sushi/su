/*
    
    Prototype for the compiler module generated by the compiler when a project is built.
    This file, unless compiling in debug, or explicitly requested by the user, will not exist
    as an actual file, it is generated internally.

*/

#scope module compiler
// or, i would prefer something more in line with normal syntax, like:
compiler : module;
// or something like that 
// which just declares that the following code belongs to the module 'compiler'. the syntax doesn't conflict 
// with anything, because amu has no reason to support forward declarations since things declared in gloabl
// scope are global, and it keeps the name on the left
// especially for the case where a module may have arguments: 
// compiler : module(context : Context);

context : module {

    Context : struct {
        allocate:   (u32) -> void*;
        deallocate: (void*) -> u32;
        reallocate: (void*) -> void*;
    }

    stack: Context[..];

    push: (context:Context) -> u32 {
        ok := stack.add(context);
        if(!ok) return 0;
        return 1;
    }

    pop: (context:Context) -> void {
        stack.pop();
    }

    allocate: (bytes: u32) -> void* {
        return stack[-1].allocate(bytes);
    }

    allocate: (count: u32)<?T> -> T* {
        return stack[-1].allocate(count*sizeof<T>);
    } 

    deallocate: (ptr: void*) -> u32 {
        return stack[-1].deallocate(ptr);
    }

}

allocate: (count:u32)<?T> -> T* {
    size := compiler.types.T.size;
    // ask OS for memory with given size
    // return ptr 
    return ptr;

}

dogs := context.allocate(30)<Dog>;

sizeof: <?T> -> u32 {

}